scopeName: 'source.coccinelle'
name: 'Coccinelle'
type: 'tree-sitter'
parser: 'tree-sitter-coccinelle'

fileTypes: [
  'cocci'
]

comments:
  start: '// '

folds: [
  {
    type: 'comment'
  }
  {
    type: 'changeset'
  }
]

scopes:

  'comment': 'comment.block'

  """
  include > "#include",
  using_file > "using",
  using_iso > "using",
  virtual > "virtual"
  """: 'keyword.control.directive'

  'virtual > id': 'constant.other'

  """
  script_metavariables > "script:",
  script_metavariables > "initialize:",
  script_metavariables > "finalize:",
  """: 'keyword.control.directive'

  'language': 'keyword.control'

  """
  metavariables > "@",
  metavariables > "@@",
  script_metavariables > "@",
  script_metavariables > "@@",
  """: 'keyword.control.other'

  """
  "extends",
  "depends",
  "on",
  "ever",
  "never",
  "file",
  "in",
  "using",
  "disable",
  "exists",
  "forall",
  "expression",
  "identifier",
  "type",
  "list",
  "binary",
  "operator"
  """: 'keyword.control'

  '";"': 'punctuation.terminator.statement'
  '"["': 'punctuation.definition.begin.bracket.square'
  '"]"': 'punctuation.definition.end.bracket.square'
  '","': 'punctuation.separator.delimiter'
  '"{"': 'punctuation.section.block.begin.bracket.curly'
  '"}"': 'punctuation.section.block.end.bracket.curly'
  '"("': 'punctuation.section.parens.begin.bracket.round'
  '")"': 'punctuation.section.parens.end.bracket.round'

  '"&&"': 'keyword.operator'
  '"||"': 'keyword.operator'
  '"<<"': 'keyword.operator'
  '"="': 'keyword.operator'

  'string': 'string.quoted.double'
  'pathToIsoFile': 'string.quoted.other'
  'integer': 'constant.numeric.decimal'

  'id': 'variable.other'
