scopeName: 'source.coccinelle'
name: 'Coccinelle'
type: 'tree-sitter'
parser: 'tree-sitter-coccinelle'

fileTypes: [
  'cocci'
]

comments:
  start: '// '

folds: [
  {
    type: 'comment'
  }
  {
    type: 'changeset'
  }
  {
    type: 'prolog'
  }
]

scopes:

  'comment': 'comment.block'

  """
  include > "#include",
  using > "using",
  virtual > "virtual"
  """: 'keyword.control.directive'

  'virtual > pure_ident': 'constant.other'

  """
  script_metavariables > "script",
  script_metavariables > "initialize",
  script_metavariables > "finalize",
  """: 'keyword.control.directive'

  'language': 'constant.other'

  """
  metavariables > "@",
  metavariables > "@@",
  script_metavariables > "@",
  script_metavariables > "@@",
  """: 'keyword.control.other'

  """
  "any",
  "assignment",
  "attribute",
  "binary",
  "comments",
  "constant",
  "declaration",
  "declarer",
  "depends",
  "disable",
  "error",
  "ever",
  "exists",
  "expression",
  "extends",
  "field",
  "file",
  "finalize",
  "forall",
  "format",
  "fresh",
  "function",
  "global",
  "identifier",
  "idexpression",
  "in",
  "initialiser",
  "initialize",
  "initializer",
  "iterator",
  "list",
  "local",
  "merge",
  "metavariable",
  "name",
  "never",
  "on",
  "operator",
  "parameter",
  "position",
  "script",
  "statement",
  "symbol",
  "type",
  "typedef",
  "using",
  "virtual",
  "when"
  """: 'keyword.control'

  '"struct"': 'keyword.control'
  '"enum"': 'keyword.control'
  '"union"': 'keyword.control'

  '"signed"': 'support.storage.type'
  '"unsigned"': 'support.storage.type'
  '"short"': 'support.storage.type'
  '"long"': 'support.storage.type'

  '"const"': 'storage.modifier'
  '"volatile"': 'storage.modifier'

  """
  "char",
  "int",
  "float",
  "double",
  "size_t",
  "ssize_t",
  "ptrdiff_t",
  "decimal",
  "typeof"
  """: 'support.storage.type'

  '";"': 'punctuation.terminator.statement'
  '"["': 'punctuation.definition.begin.bracket.square'
  '"]"': 'punctuation.definition.end.bracket.square'
  '","': 'punctuation.separator.delimiter'
  '"{"': 'punctuation.section.block.begin.bracket.curly'
  '"}"': 'punctuation.section.block.end.bracket.curly'
  '"("': 'punctuation.section.parens.begin.bracket.round'
  '")"': 'punctuation.section.parens.end.bracket.round'

  '"."': 'keyword.operator.member'
  '"*"': 'keyword.operator'
  '"-"': 'keyword.operator'
  '"+"': 'keyword.operator'
  '"/"': 'keyword.operator'
  '"%"': 'keyword.operator'
  '"++"': 'keyword.operator'
  '"--"': 'keyword.operator'
  '"=="': 'keyword.operator'
  '"!"': 'keyword.operator'
  '"!="': 'keyword.operator'
  '"<"': 'keyword.operator'
  '">"': 'keyword.operator'
  '">="': 'keyword.operator'
  '"<="': 'keyword.operator'
  '"&&"': 'keyword.operator'
  '"||"': 'keyword.operator'
  '"&"': 'keyword.operator'
  '"|"': 'keyword.operator'
  '"^"': 'keyword.operator'
  '"~"': 'keyword.operator'
  '"<<"': 'keyword.operator'
  '">>"': 'keyword.operator'
  '"="': 'keyword.operator'
  '"+="': 'keyword.operator'
  '"-="': 'keyword.operator'
  '"*="': 'keyword.operator'
  '"/="': 'keyword.operator'
  '"%="': 'keyword.operator'
  '"<<="': 'keyword.operator'
  '">>="': 'keyword.operator'
  '"&="': 'keyword.operator'
  '"^="': 'keyword.operator'
  '"|="': 'keyword.operator'
  '"?"': 'keyword.operator'
  '":"': 'keyword.operator'

  '"=~"': 'keyword.operator'
  '"!~"': 'keyword.operator'
  """
  "<?", ">?", ">?=", "<?="
  """: 'keyword.operator'

  'string': 'string.quoted.double'
  'pathIsoFile': 'string.quoted.other'
  'int': 'constant.numeric.decimal'

  'rule_name': 'entity.name.function'

  'pure_ident': 'variable.other'
